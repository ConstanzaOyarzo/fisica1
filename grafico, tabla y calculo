import tkinter as tk
from tkinter import ttk
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Crear la ventana principal
ventana = tk.Tk()
ventana.title("Gráfico y Tabla")

# Obtener el tamaño de la pantalla
ancho_pantalla = ventana.winfo_screenwidth()
alto_pantalla = ventana.winfo_screenheight()

# Calcular el ancho y alto de cada cuarto de la pantalla
ancho_cuarto = ancho_pantalla // 2
alto_cuarto = alto_pantalla // 2

# Crear los marcos para cada cuarto de la pantalla
marco_1 = tk.Frame(ventana, width=ancho_cuarto, height=alto_cuarto, bg='blue')
marco_1.grid(row=0, column=0)

marco_2 = tk.Frame(ventana, width=ancho_cuarto, height=alto_cuarto, bg='blue')
marco_2.grid(row=0, column=1)

marco_3 = tk.Frame(ventana, width=ancho_cuarto, height=alto_cuarto, bg='red')
marco_3.grid(row=1, column=0)

marco_4 = tk.Frame(ventana, width=ancho_cuarto, height=alto_cuarto, bg='yellow')
marco_4.grid(row=1, column=1)

# Crear la figura del gráfico
figura = Figure(figsize=(5, 4), dpi=100)
grafico = figura.add_subplot(111)

# Crear el Treeview (tabla)
tabla = ttk.Treeview(marco_4)
tabla.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Definir las columnas de la tabla
tabla['columns'] = ("Fuerza", "Distancia", "Trabajo")

# Formato de las columnas
tabla.column("#0", width=0, stretch=tk.NO)
tabla.column("Fuerza", width=100, anchor=tk.CENTER)
tabla.column("Distancia", width=100, anchor=tk.CENTER)
tabla.column("Trabajo", width=100, anchor=tk.CENTER)

# Encabezados de las columnas
tabla.heading("#0", text="", anchor=tk.CENTER)
tabla.heading("Fuerza", text="Fuerza (N)", anchor=tk.CENTER)
tabla.heading("Distancia", text="Distancia (m)", anchor=tk.CENTER)
tabla.heading("Trabajo", text="Trabajo (J)", anchor=tk.CENTER)

# Crear los widgets para ingresar los datos
label_fuerza = tk.Label(marco_3, text="Fuerza (N):")
label_fuerza.pack()

entry_fuerza = tk.Entry(marco_3)
entry_fuerza.pack()

label_distancia = tk.Label(marco_3, text="Distancia (m):")
label_distancia.pack()

entry_distancia = tk.Entry(marco_3)
entry_distancia.pack()

# Función para calcular el trabajo
def calcular_trabajo():
    try:
        fuerza = float(entry_fuerza.get())
        distancia = float(entry_distancia.get())
        
        trabajo = fuerza * distancia
        
        label_resultado.config(text=f"El trabajo es: {trabajo} J")
        
        # Agregar los datos a la lista
        datos_grafico.append((fuerza, distancia, trabajo))
        
        # Actualizar el gráfico y la tabla
        actualizar_grafico_tabla()
        
    except ValueError:
        label_resultado.config(text="Ingrese valores numéricos válidos")

# Botón para calcular el trabajo
btn_calcular = tk.Button(marco_3, text="Calcular", command=calcular_trabajo)
btn_calcular.pack()

# Etiqueta para mostrar el resultado
label_resultado = tk.Label(marco_3, text="")
label_resultado.pack()

# Agregar el gráfico a la ventana
canvas = FigureCanvasTkAgg(figura, master=marco_2)
canvas.draw()
canvas.get_tk_widget().pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

# Lista para almacenar los datos del gráfico y la tabla
datos_grafico = []

# Función para actualizar el gráfico y la tabla
def actualizar_grafico_tabla():
    # Limpiar el gráfico anterior
    grafico.clear()
    
    # Crear el nuevo gráfico con los datos almacenados
    fuerzas, distancias, trabajos = zip(*datos_grafico)
    grafico.plot(distancias, fuerzas)
    grafico.set_xlabel("Distancia (m)")
    grafico.set_ylabel("Fuerza (N)")
    grafico.set_title("Gráfico de Trabajo Mecánico")
    grafico.grid(True)
    
    # Actualizar el gráfico en la interfaz
    canvas.draw()
    
    # Actualizar la tabla con los datos almacenados
    actualizar_tabla()

# Función para actualizar la tabla con los datos almacenados
def actualizar_tabla():
    # Limpiar los datos anteriores de la tabla
    tabla.delete(*tabla.get_children())
    
    # Agregar los datos a la tabla
    for i, (fuerza, distancia, trabajo) in enumerate(datos_grafico, start=1):
        tabla.insert("", "end", text=str(i), values=(fuerza, distancia, trabajo))

# Iniciar el bucle de eventos
ventana.mainloop()
